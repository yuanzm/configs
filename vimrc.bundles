" ----------------------------------------------------------------------------
" Vim-Plug:Plgin management and setting
" ----------------------------------------------------------------------------
call plug#begin('~/.vim/bundle')

let mapleader = ','
let g:mapleader = ','
let s:vim8 = has('patch-8.0.0039') && exists('*job_start')

" ----------------------------------------------------------------------------
" vim plugin bundle control, command model
" :PlugInstall     install
" :PlugInstall!    update
" :PlugClean       remove plugin not in list
" ----------------------------------------------------------------------------
Plug 'majutsushi/tagbar'

" display
" 开始标签和结束标签高亮
Plug 'Valloric/MatchTagAlways'
Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'gorodinskiy/vim-coloresque'
Plug 'airblade/vim-gitgutter'
Plug 'inside/vim-search-pulse'

" fast move
"Plug 'easymotion/vim-easymotion'
" 搜索字符的时候高亮唯一字符
Plug 'unblevable/quick-scope'

" fast edit
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets' | Plug 'epilande/vim-es2015-snippets'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-repeat'
Plug 'gcmt/wildfire.vim'
Plug 'Raimondi/delimitMate'
Plug 'alvan/vim-closetag'
Plug 'mattn/emmet-vim'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-surround'
Plug 'bronson/vim-trailing-whitespace'
Plug 'scrooloose/nerdcommenter'
Plug 'editorconfig/editorconfig-vim'
Plug 'Chiel92/vim-autoformat', {'on': 'Autoformat'}
" key mapping: g< and  g>
Plug 'machakann/vim-swap'
" Visual mode: gs
" text objects, for example: gsi(
Plug 'christoomey/vim-sort-motion'

" tools
Plug 'Valloric/YouCompleteMe', {'do': './install.py'}
"if s:vim8
    "Plug 'w0rp/ale'
    "let g:airline_section_error = '%{ALEGetStatusLine()}'
"else
    "Plug 'scrooloose/syntastic'
"endif
"Plug 'ruanyl/vim-eslint', {'do': 'npm install'}
Plug 'majutsushi/tagbar'
Plug 'plasticboy/vim-markdown'
Plug 'tpope/vim-obsession' | Plug 'dhruvasagar/vim-prosession'
Plug 'szw/vim-maximizer'
Plug 'thinca/vim-quickrun'
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'}
Plug 'sjl/gundo.vim', {'on': 'GundoToggle'}
Plug 'ruanyl/vim-fidget', {'do': 'npm install'}
Plug 'MattesGroeger/vim-bookmarks'
Plug 'ruanyl/vim-fixmyjs', {'on': 'Fixmyjs'}
Plug 'moll/vim-bbye'
Plug 'tpope/vim-fugitive' | Plug 'junegunn/gv.vim'
Plug 'vim-scripts/BufOnly.vim'

" theme
Plug 'altercation/vim-colors-solarized'
Plug 'tomasr/molokai'
Plug 'morhetz/gruvbox'

" search
Plug 'ctrlpvim/ctrlp.vim'
Plug 'tacahiroy/ctrlp-funky'
Plug 'j5shi/ctrlp_bdelete.vim'
Plug 'dyng/ctrlsf.vim', {'on': '<Plug>CtrlSFVwordExec'}
Plug 'ggVGc/vim-fuzzysearch'
Plug 'rking/ag.vim'

" javascript
"Plug 'posva/vim-vue'
Plug 'pangloss/vim-javascript'
Plug 'marijnh/tern_for_vim', {'do': 'npm install'}
Plug 'othree/javascript-libraries-syntax.vim'
"Plug 'kchmck/vim-coffee-script'
"Plug 'heavenshell/vim-jsdoc', {'for': ['javascript', 'jsx', 'typescript']}
"Plug 'burnettk/vim-angular'
"Plug 'mxw/vim-jsx'

" typescript
Plug 'HerringtonDarkholme/yats.vim'

" PHP
"if count(g:bigvim_minor_plugins, 'php')
    "Plug 'StanAngeloff/php.vim', {'for': 'php'}
    "Plug 'mkusher/padawan.vim', {'for': 'php'}
    "Plug 'ruanyl/vim-php-manual', {'for': 'php'}
    "Plug 'shawncplus/phpcomplete.vim', {'for': 'php'}
    "Plug 'fantasyczl/blade-php-vim'
"endif

" CSS
if count(g:bigvim_minor_plugins, 'css')
    Plug 'ruanyl/vim-caniuse', {'on': 'Caniuse', 'for': ['css', 'html']}
    "Plug 'hail2u/vim-css3-syntax'
    Plug 'cakebaker/scss-syntax.vim'
    Plug 'JulesWang/css.vim'
    "au BufRead,BufNewFile *.scss set filetype=scss.css
endif

"Load local plugins
if filereadable(expand("~/.vim/vimrc.bundles.local"))
  source ~/.vim/vimrc.bundles.local
endif
call plug#end()

" ----------------------------------------------------------------------------
" NERDTree
" ----------------------------------------------------------------------------
nnoremap <leader>e :NERDTreeToggle<CR>
let NERDTreeHighlightCursorline=1
let NERDTreeQuitOnOpen=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end

" ----------------------------------------------------------------------------
" tagbar
" require ctags, jsctags
" npm install -g git+https://github.com/ramitos/jsctags.git
" ----------------------------------------------------------------------------
let g:tagbar_type_javascript = {
    \ 'ctagsbin' : 'jsctags'
    \ }
nnoremap <leader>t :TagbarToggle<CR>
let g:tagbar_autofocus = 1
let g:tagbar_width = 50
let g:tagbar_ctags_bin='/usr/bin/ctags'

" ----------------------------------------------------------------------------
" ctrlp.vim
" ----------------------------------------------------------------------------
nnoremap <leader>m :CtrlPMRU<CR>
nnoremap <leader>b :CtrlPBuffer<CR>
let g:ctrlp_custom_ignore = {
    \ 'dir':  '\v[\/](node_modules|target|dist)|\.(git|hg|svn|rvm)$',
    \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz)$',
    \ }
let g:ctrlp_follow_symlinks = 1
let g:ctrlp_mruf_relative = 1
let g:ctrlp_mruf_exclude = '/tmp/.*\|/temp/.*'
call ctrlp_bdelete#init()

" ----------------------------------------------------------------------------
" ctrlp-funky
" Mapping: <Leader>fu
" ----------------------------------------------------------------------------
let g:ctrlp_funky_matchtype = 'path'
let g:ctrlp_funky_syntax_highlight = 1
nnoremap <Leader>fu :CtrlPFunky<Cr>

" ----------------------------------------------------------------------------
" ctrlsf.vim
" ----------------------------------------------------------------------------
vmap <Leader>s <Plug>CtrlSFVwordExec

" ----------------------------------------------------------------------------
" ag.vim
" ----------------------------------------------------------------------------
nnoremap <Leader><Leader>a :Ag!<space>
let g:ag_working_path_mode='r'

" ----------------------------------------------------------------------------
" vim-fuzzysearch
" ----------------------------------------------------------------------------
nnoremap <leader><leader>/ :FuzzySearch<cr>

" ----------------------------------------------------------------------------
" vim-airline
" ----------------------------------------------------------------------------
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#buffer_nr_show = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
    let g:airline_left_sep = '▶'
    let g:airline_left_alt_sep = '❯'
    let g:airline_right_sep = '◀'
    let g:airline_right_alt_sep = '❮'
    let g:airline_symbols.linenr = '¶'
    let g:airline_symbols.branch = '⎇'
    let g:airline_symbols.whitespace = 'Ξ'
    let g:airline_symbols.maxlinenr = ''

" ----------------------------------------------------------------------------
" vim-trailing-whitespace
" Mapping: <leader><space>
" ----------------------------------------------------------------------------
map <leader><space> :FixWhitespace<cr>

" ----------------------------------------------------------------------------
" vim-bookmarks
" ----------------------------------------------------------------------------
let g:bookmark_no_default_key_mappings = 1
nnoremap <Leader><Leader>m :BookmarkToggle<CR>
nnoremap <Leader>i :BookmarkAnnotate<CR>
nnoremap <Leader>a :BookmarkShowAll<CR>
nnoremap <Leader>j :BookmarkNext<CR>
nnoremap <Leader>k :BookmarkPrev<CR>
nnoremap <Leader>c :BookmarkClear<CR>
nnoremap <Leader>x :BookmarkClearAll<CR>

" ----------------------------------------------------------------------------
" vim-maximizer
" ----------------------------------------------------------------------------
nnoremap <tab> :MaximizerToggle<CR>

" ----------------------------------------------------------------------------
" vim-colors-solarized
" ----------------------------------------------------------------------------
let g:solarized_termcolors=16
let g:solarized_termtrans=1
let g:solarized_contrast="high"
let g:solarized_visibility="high"

" ----------------------------------------------------------------------------
" wildfire.vim
" Mapping: <Enter>
" ----------------------------------------------------------------------------
let g:wildfire_objects = {
    \ "*" : ["i'", 'i"', "i)", "i]", "i}", "ip"],
    \ "html,xml" : ["at"],
\ }
let g:wildfire_fuel_map = "<ENTER>"
let g:wildfire_water_map = "<BS>"

" ----------------------------------------------------------------------------
" YouCompleteMe
" ----------------------------------------------------------------------------
let g:ycm_autoclose_preview_window_after_completion = 1
"let g:ycm_complete_in_strings = 1
let g:ycm_complete_in_comments = 1
let g:ycm_key_list_select_completion = ['<Tab>', '<C-j>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_semantic_triggers =  {
            \   'c' : ['->', '.'],
            \   'objc' : ['->', '.'],
            \   'ocaml' : ['.', '#'],
            \   'cpp,objcpp' : ['->', '.', '::'],
            \   'perl' : ['->'],
            \   'php' : ['->', '::', '(', 'use ', 'namespace ', '\'],
            \   'cs,java,typescript,d,python,perl6,scala,vb,elixir,go' : ['.', 're!(?=[a-zA-Z]{3,4})'],
            \   'html': ['<', '"', '</', ' '],
            \   'vim' : ['re![_a-za-z]+[_\w]*\.'],
            \   'ruby' : ['.', '::'],
            \   'lua' : ['.', ':'],
            \   'erlang' : [':'],
            \   'haskell' : ['.', 're!.'],
            \   'scss,css': [ 're!^\s{2,4}', 're!:\s+' ],
            \ }

" ----------------------------------------------------------------------------
" delimitMate
" ----------------------------------------------------------------------------
let delimitMate_matchpairs = "(:),[:],{:}"
let delimitMate_expand_cr = 1

" ----------------------------------------------------------------------------
" tabular
" ----------------------------------------------------------------------------
nmap <Leader>a= :Tabularize /=<CR>
vmap <Leader>a= :Tabularize /=<CR>
nmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a: :Tabularize /:<CR>
nmap <Leader>a" :Tabularize /"<CR>
vmap <Leader>a" :Tabularize /"<CR>

" ----------------------------------------------------------------------------
" vim-closetag
" ----------------------------------------------------------------------------
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.xml,*.js,*.tsx,*.vue,*.wxml"

" ----------------------------------------------------------------------------
" ale
" ----------------------------------------------------------------------------
let g:ale_sign_error = '✘'
let g:ale_sign_warning = '❗'
let g:ale_echo_msg_error_str = '✷ Error'
let g:ale_echo_msg_warning_str = '⚠ Warning'
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
let g:ale_statusline_format = ['✘ %d', '❗ %d', '✔ ok']
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'typescript': ['tsserver'],
\   'scss': [],
\   'java': [],
\}
nmap <silent> <Leader>j <Plug>(ale_next_wrap)
nmap <silent> <Leader>k <Plug>(ale_previous_wrap)

" ----------------------------------------------------------------------------
" syntastic
" ----------------------------------------------------------------------------
let g:syntastic_error_symbol='✘'
let g:syntastic_warning_symbol='❗'
let g:syntastic_style_error_symbol='»'
let g:syntastic_style_warning_symbol='•'
let g:syntastic_check_on_open=1
let g:syntastic_enable_highlighting = 0
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_mode_map = {
    \ "mode": "active",
    \ "active_filetypes": [],
    \ "passive_filetypes": ["java"] }

" ----------------------------------------------------------------------------
" vim-markdown
" ----------------------------------------------------------------------------
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_no_default_key_mappings=1
let g:vim_markdown_frontmatter=1

" ----------------------------------------------------------------------------
" tern_for_vim
" ----------------------------------------------------------------------------
let tern_show_signature_in_pum = 1
let tern_show_argument_hints = 'on_hold'
autocmd FileType javascript nnoremap <leader>d :TernDef<CR>
autocmd FileType javascript setlocal omnifunc=tern#Complete

" ----------------------------------------------------------------------------
" padawan.vim
" Generate Index: :call padawan#GenerateIndex()
" Start Server: :call padawan#StartServer()
" Stop Server: :call padawan#StopServer()
" Restart Server: :call padawan#RestartServer()
" cd ~/.vim/bundle/padawan.vim/padawan.php && composer install
" ----------------------------------------------------------------------------

" ----------------------------------------------------------------------------
" gundo.vim
" ----------------------------------------------------------------------------
nnoremap <leader>h :GundoToggle<CR>
let g:gundo_auto_preview = 0

" ----------------------------------------------------------------------------
" vim-autoformat
"require: npm install -g js-beautify
" ----------------------------------------------------------------------------
autocmd FileType javascript,json,html,css,scss noremap <buffer>  <leader><leader>f :Autoformat<cr>

" ----------------------------------------------------------------------------
" vim-bbye
" ----------------------------------------------------------------------------
nnoremap qq :Bdelete<cr>

" ----------------------------------------------------------------------------
" BufOnly.vim
" ----------------------------------------------------------------------------
nnoremap <silent> qo :BufOnly<CR>
